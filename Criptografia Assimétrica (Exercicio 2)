# --- S-DES completo: criptografar e decriptografar ---

# Permutacoes padrao do S-DES
P10 = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]
P8 = [6, 3, 7, 4, 8, 5, 10, 9]
IP = [2, 6, 3, 1, 4, 8, 5, 7]
IP_INV = [4, 1, 3, 5, 7, 2, 8, 6]
EP = [4, 1, 2, 3, 2, 3, 4, 1]
P4 = [2, 4, 3, 1]

# S-boxes do S-DES
S0 = [
    [1,0,3,2],
    [3,2,1,0],
    [0,2,1,3],
    [3,1,3,2]
]
S1 = [
    [0,1,2,3],
    [2,0,1,3],
    [3,0,1,0],
    [2,1,0,3]
]

def permutar(bits, tabela):
    return [bits[i-1] for i in tabela]

def left_shift(bits, n):
    return bits[n:] + bits[:n]

def gerar_subchaves(chave10):
    chave_p10 = permutar(chave10, P10)
    esquerda = chave_p10[:5]
    direita = chave_p10[5:]
    
    esquerda1 = left_shift(esquerda, 1)
    direita1 = left_shift(direita, 1)
    chave1 = permutar(esquerda1 + direita1, P8)

    esquerda2 = left_shift(esquerda1, 2)
    direita2 = left_shift(direita1, 2)
    chave2 = permutar(esquerda2 + direita2, P8)

    return chave1, chave2

def sbox(bits, box):
    linha = (bits[0]<<1) | bits[3]
    coluna = (bits[1]<<1) | bits[2]
    valor = box[linha][coluna]
    return [(valor >> 1) & 1, valor & 1]

def f(bits, chave):
    esquerda = bits[:4]
    direita = bits[4:]
    
    direita_expandida = permutar(direita, EP)
    xor_result = [b ^ k for b, k in zip(direita_expandida, chave)]

    s0_out = sbox(xor_result[:4], S0)
    s1_out = sbox(xor_result[4:], S1)
    
    p4_result = permutar(s0_out + s1_out, P4)
    esquerda_nova = [l ^ p for l, p in zip(esquerda, p4_result)]

    return esquerda_nova + direita

def fk(bits, chave1, chave2):
    temp = f(bits, chave1)
    temp = temp[4:] + temp[:4]
    temp = f(temp, chave2)
    return temp

def criptografar(plaintext8, chave10):
    chave1, chave2 = gerar_subchaves(chave10)
    ip = permutar(plaintext8, IP)
    result = fk(ip, chave1, chave2)
    final = permutar(result, IP_INV)
    return final

def decriptografar(ciphertext8, chave10):
    chave1, chave2 = gerar_subchaves(chave10)
    ip = permutar(ciphertext8, IP)
    result = fk(ip, chave2, chave1)
    final = permutar(result, IP_INV)
    return final

def str_para_bits(s):
    return [int(c) for c in s]

def bits_para_str(bits):
    return ''.join(str(b) for b in bits)

# --- Testando ---
chave = "1001011101"  # Exemplo de chave 10 bits
mensagem = "01111001"  # Exemplo de mensagem 8 bits

chave_bits = str_para_bits(chave)
mensagem_bits = str_para_bits(mensagem)

# Criptografar
cifrado_bits = criptografar(mensagem_bits, chave_bits)
print("Mensagem cifrada:", bits_para_str(cifrado_bits))

# Decriptografar
decifrado_bits = decriptografar(cifrado_bits, chave_bits)
print("Mensagem decifrada:", bits_para_str(decifrado_bits))
